import org.apache.commons.io.FileUtils

plugins {
    id 'fabric-loom' version '1.2-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
    maven { url = "https://jitpack.io" }
    maven {
        name = 'Minecraft Forge'
        url "https://maven.minecraftforge.net/"
    }
}

loom {
    accessWidenerPath = file("src/main/resources/wyrim.accessWidener")
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.officialMojangMappings()

    // Artemis stuff
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    compileOnly "net.minecraftforge:eventbus:${forge_eventbus_version}"
    implementation(annotationProcessor("com.github.llamalad7.mixinextras:mixinextras-common:${mixinextras_version}"))

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
//    compileOnly(project(":common"))
}


processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
    exclude 'com/wynntils/**'
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}

tasks.register('wyrimSetup') {
    File artemisDir = new File(project.rootDir.toString() + "/Artemis/common/src/main/java")
    File destDir = new File(project.rootDir.toString() + "/src/main/")
    File dummyDir = new File(project.rootDir.toString() + "/dummy/java/")
    FileUtils.deleteDirectory(new File(project.rootDir.toString() + "/src/main/java/com"))
    FileUtils.deleteDirectory(new File(project.rootDir.toString() + "/Artemis"))
    Runtime.getRuntime().exec("git clone https://github.com/Wynntils/Artemis.git").waitFor();
    FileUtils.copyDirectoryToDirectory(artemisDir, destDir)
    delete(files("${project.rootDir}/src/main/java/com/wynntils/services/hades/HadesClientHandler.java"))
    FileUtils.copyDirectoryToDirectory(dummyDir, destDir)
    FileUtils.deleteDirectory(new File(project.rootDir.toString() + "/Artemis"))
    println("Completed patching Artemis")
}